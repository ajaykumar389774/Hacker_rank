1. Java Strings Introduction

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String B=sc.next();
        
        System.out.println(A.length() + B.length());
        
        if(A.compareTo(B)>0)
        {
            System.out.println("Yes");
        }
        else{
            
            System.out.println("No");
            
        }
        
        A = A.substring(0,1).toUpperCase()+A.substring(1);
        B= B.substring(0,1).toUpperCase()+B.substring(1);
        
        System.out.println(A + " " + B);

               
    }
}

Sample Input 0

hello
java
Sample Output 0

9
No
Hello Java

-----------------------------------------------------------------------------------------------------------------------------------

2. Java Substring


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String S = in.next();
        int start = in.nextInt();
        int end = in.nextInt();
        
        System.out.println(S.substring(start,end));
    }
}

Sample Input

Helloworld
3 7
Sample Output

lowo



-----------------------------------------------------------------------------------------------------------------------------------

3 . Java Substring Comparison


import java.util.Scanner;

public class Solution {

    public static String getSmallestAndLargest(String s, int k) {
        String smallest =s.substring(0,k);
        String largest =s.substring(0,k);
        
        for(int i=1;i<s.length();i++)
        {
            if(i+k <= s.length())
            {
                String sub = s.substring(i,i+k);
                if(sub.compareTo(smallest) < 0)
                {
                    smallest = sub;
                }
                else if(sub.compareTo(largest) > 0)
                {
                    largest = sub;
                }
            }
        }
        
        
        
        return smallest + "\n" + largest;
    }


    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.next();
        int k = scan.nextInt();
        scan.close();
      
        System.out.println(getSmallestAndLargest(s, k));
    }
}


Sample Input 0

welcometojava
3
Sample Output 0

ava
wel

-----------------------------------------------------------------------------------------------------------------------------------


4. Java String Reverse

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        
        int start =0;
        int end = s.length()-1;
        boolean flag = true;
        while(start <= end)
        {
            if(s.charAt(start) != s.charAt(end))
            {
                flag=false;
                break;
            }
            start++;
            end--;
        }
        
        if(flag)
        {
            System.out.println("Yes");
        }
        else
        {
            System.out.println("No");
        }
        
        
}}

Another Method : 

StringBuilder sc = new StringBuilder(s);
if(sc.reverse().toString.equals(s))
{
   System.out.pritnln("Yes");
}
else
{
 System.out.pritnln("No");

}









Sample Input

madam
Sample Output

Yes








-----------------------------------------------------------------------------------------------------------------------------------




5. Java Strings Anagrams


mport java.util.Scanner;

public class Solution {

    static boolean isAnagram(String a, String b) {
        
        if(a.length() != b.length())
        {
            return false;
        }
        
        char[] arr1 = a.toLowerCase().toCharArray();
        char[] arr2 = b.toLowerCase().toCharArray();
        
        java.util.Arrays.sort(arr1);
        java.util.Arrays.sort(arr2);
        
        return String.valueOf(arr1).equals(String.valueOf(arr2));
        
        
        
    }

    public static void main(String[] args) {
    
        Scanner scan = new Scanner(System.in);
        String a = scan.next();
        String b = scan.next();
        scan.close();
        boolean ret = isAnagram(a, b);
        if(ret)
        {
         System.out.println("Anagrams");
        }
        else{
            System.out.pritnln("Not Anagrams");
       }
        System.out.println( (ret) ? "Anagrams" : "Not Anagrams" );
    }
}


Another Method



Sample Input 0

anagram
margana
Sample Output 0

Anagrams


-----------------------------------------------------------------------------------------------------------------------------------


6. Java String Tokens

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.nextLine();
        String [] arr = s.split("[\\s !,?._'@]+");
        
        int length = arr.length;
        
        for(String str : arr)
        {
           if(str.equals(""))
           {
            length--;
           }    
        }
        
        System.out.println(length);
        
        for(String str : arr)
        
        {
            if(!str.equals(""))
        {
            System.out.println(str);
        }
        }
        
        scan.close();
    }
}

Sample Input

He is a very very good boy, isn't he?
Sample Output

10
He
is
a
very
very
good
boy
isn
t
he


-----------------------------------------------------------------------------------------------------------------------------------

7. Java Strings Pattern Syntax Checker


import java.util.Scanner;
import java.util.regex.*;

public class Solution
{
	public static void main(String[] args){
		Scanner in = new Scanner(System.in);
		int testCases = Integer.parseInt(in.nextLine());
		while(testCases>0){
			String pattern = in.nextLine();
            try{
               Pattern p = Pattern.compile(pattern);
               System.out.println("Valid");
            }
            catch(PatternSyntaxException e)
            {
                System.out.println("Invalid");
            }
            
            testCases--;
		}
	}
}


Sample Input

3
([A-Z])(.+)
[AZ[a-z](a-z)
batcatpat(nat
Sample Output

Valid
Invalid
Invalid
-----------------------------------------------------------------------------------------------------------------------------------
11. Java Strings Java Regex

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Scanner;

class Solution{

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        while(in.hasNext()){
            String IP = in.next();
            System.out.println(IP.matches(new MyRegex().pattern));
        }

    }
}

class MyRegex{
    
    String pattern = "(([0-9]|[0-9][0-9]|(0|1)[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[0-9][0-9]|(0|1)[0-9][0-9]|2[0-4][0-9]|25[0-5])";
    
    
     MyRegex()
     
     {
        
     }
    
}

Sample Input

000.12.12.034
121.234.12.12
23.45.12.56
00.12.123.123123.123
122.23
Hello.IP
Sample Output

true
true
true
false
false
false



-----------------------------------------------------------------------------------------------------------------------------------

8. Java Regex 2 - Duplicate Words

\\b - Set Boundaries it will not take twice words (Example : GoodBye Bye ) Bye twice is there it will not take that
\\w - it is used for characters (a-z,A-Z_0-9)
\\W - ^\\w
\\1

find() it used to find next sequence in the pattern
group() - get the input subsequence matched by the previous match result
replaceAll() -  replaces every character in input with “:“. This is because “.” has a special meaning in regex: matching any character.
The matcher() method is used to search for the pattern in a string. It returns a Matcher object which contains information about the search that was performed.
Pattern.compile() method. The first parameter indicates which pattern is being searched for and the second parameter has a flag to indicates that the search should be case-insensitive.

"\\b(\\w+)(\\W+\\1\\b)+"

import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DuplicateWords {

    public static void main(String[] args) {

        String regex = "\\b(\\w+)(\\W+\\1\\b)+";
        Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);

        Scanner in = new Scanner(System.in);
        int numSentences = Integer.parseInt(in.nextLine());
        
        while (numSentences-- > 0) {
            String input = in.nextLine();
            
            Matcher m = p.matcher(input);
            
            // Check for subsequences of input that match the compiled pattern
            while (m.find()) {
                input = input.replaceAll(m.group(),m.group(1));
            }
            
            // Prints the modified sentence.
            System.out.println(input);
        }
        
        in.close();
    }
}


Sample Input

5
Goodbye bye bye world world world
Sam went went to to to his business
Reya is is the the best player in eye eye game
in inthe
Hello hello Ab aB
Sample Output

Goodbye bye world
Sam went to his business
Reya is the best player in eye game
in inthe
Hello Ab


-----------------------------------------------------------------------------------------------------------------------------------

9. Java Strings Valid Username Regular Expression

"[a-zA-Z](\\w){7,29}"

import java.util.Scanner;
class UsernameValidator {
    /*
     * Write regular expression here.
     */
    public static final String regularExpression = "[a-zA-Z](\\w){7,29}";
}


public class Solution {
    private static final Scanner scan = new Scanner(System.in);
    
    public static void main(String[] args) {
        int n = Integer.parseInt(scan.nextLine());
        while (n-- != 0) {
            String userName = scan.nextLine();

            if (userName.matches(UsernameValidator.regularExpression)) {
                System.out.println("Valid");
            } else {
                System.out.println("Invalid");
            }           
        }
    }
}

Sample Input 0

8
Julia
Samantha
Samantha_21
1Samantha
Samantha?10_2A
JuliaZ007
Julia@007
_Julia007
Sample Output 0

Invalid
Valid
Valid
Invalid
Invalid
Valid
Invalid
Invalid

-----------------------------------------------------------------------------------------------------------------------------------

10. Java Strings Tag Content Extractor

"<(.+)>([^<]+)</\\1>"

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution{
	public static void main(String[] args){
		
		Scanner in = new Scanner(System.in);
		int testCases = Integer.parseInt(in.nextLine());
		while(testCases>0){
			String line = in.nextLine();
			
          	Pattern p = Pattern.compile("<(.+)>([^<]+)</\\1>");
            Matcher m = p.matcher(line);
            boolean flag=false;
            while(m.find())
            {
                System.out.println(m.group(2));
                flag=true;

            }
            
            if(!flag)
            {
                System.out.println("None");
            }
			
			testCases--;
		}
	}
}

Sample Input

4
<h1>Nayeem loves counseling</h1>
<h1><h1>Sanjay has no watch</h1></h1><par>So wait for a while</par>
<Amee>safat codes like a ninja</amee>
<SA premium>Imtiaz has a secret crush</SA premium>
Sample Output

Nayeem loves counseling
Sanjay has no watch
So wait for a while
None
Imtiaz has a secret crush
